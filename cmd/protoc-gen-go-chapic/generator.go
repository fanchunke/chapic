package main

import (
	"fmt"
	"net/http"
	"regexp"
	"sort"
	"strings"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage       = protogen.GoImportPath("context")
	fmtPackage           = protogen.GoImportPath("fmt")
	urlPackage           = protogen.GoImportPath("net/url")
	protojsonPackage     = protogen.GoImportPath("google.golang.org/protobuf/encoding/protojson")
	restyPackage         = protogen.GoImportPath("github.com/go-resty/resty/v2")
	clientOptionPackage  = protogen.GoImportPath("github.com/fanchunke/chapic/option")
	echoPackage          = protogen.GoImportPath("github.com/labstack/echo/v4")
	httpPackage          = protogen.GoImportPath("net/http")
	chapicRuntimePackage = protogen.GoImportPath("github.com/fanchunke/chapic/runtime")
	strconvPackage       = protogen.GoImportPath("strconv")
)

const deprecationComment = "// Deprecated: Do not use."

// FileDescriptorProto.package field number
const fileDescriptorProtoPackageFieldNumber = 2

// FileDescriptorProto.syntax field number
const fileDescriptorProtoSyntaxFieldNumber = 12

type generator struct {
	p    *protogen.Plugin
	file *protogen.File
	gen  *protogen.GeneratedFile
}

func newGenerator(p *protogen.Plugin, file *protogen.File, gen *protogen.GeneratedFile) *generator {
	return &generator{p, file, gen}
}

func (g *generator) P(v ...interface{}) {
	g.gen.P(v)
}

func (g *generator) generate() {
	g.generateHeaders()
	g.generateImports()
	for _, service := range g.file.Services {
		g.generateService(service)
	}
}

func (g *generator) generateHeaders() {
	// Attach all comments associated with the syntax field.
	g.generateLeadingComments(g.file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoSyntaxFieldNumber}))
	g.gen.P("// Code generated by protoc-gen-go-chapic. DO NOT EDIT.")
	g.gen.P("// versions:")
	g.gen.P("// - protoc-gen-go-chapic v", version)
	g.gen.P("// - protoc             ", protocVersion(g.p))
	if g.file.Proto.GetOptions().GetDeprecated() {
		g.gen.P("// ", g.file.Desc.Path(), " is a deprecated file.")
	} else {
		g.gen.P("// source: ", g.file.Desc.Path())
	}
	g.gen.P()
	// Attach all comments associated with the package field.
	g.generateLeadingComments(g.file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoPackageFieldNumber}))
	g.gen.P("package ", g.file.GoPackageName)
	g.gen.P()
}

func (g *generator) generateLeadingComments(loc protoreflect.SourceLocation) {
	for _, s := range loc.LeadingDetachedComments {
		g.gen.P(protogen.Comments(s))
		g.gen.P()
	}
	if s := loc.LeadingComments; s != "" {
		g.gen.P(protogen.Comments(s))
		g.gen.P()
	}
}

func (g *generator) generateImports() {
	g.gen.P("import (")
	g.gen.P("echo", " ", echoPackage)
	g.gen.P("resty", " ", restyPackage)
	g.gen.P(")")
	g.gen.P()
	g.gen.P("var _ = new(", protojsonPackage.Ident("MarshalOptions"), ")")
	g.gen.P("var _ = new(", fmtPackage.Ident("State"), ")")
	g.gen.P("var _ = new(", urlPackage.Ident("Values"), ")")

}

func (g *generator) generateService(service *protogen.Service) {
	g.generateServiceClient(service)
	g.generateServiceServer(service)
}

func (g *generator) generateServiceClient(service *protogen.Service) {
	g.generateClientInterface(service)
	g.generateClientStruct(service)

	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.gen.P(deprecationComment)
	}
	g.generateNewClientDefinitions(service)

	var methodIndex, streamIndex int
	for _, method := range service.Methods {
		if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
			g.generateClientMethod(method, methodIndex)
			methodIndex++
		} else {
			streamIndex++
		}
	}
}

func (g *generator) generateClientInterface(service *protogen.Service) {
	clientName := service.GoName + "HTTPClient"
	g.gen.P("// ", clientName, " is the client API for ", service.GoName, " service.")
	g.gen.P("//")
	g.gen.P("// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.")

	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.gen.P("//")
		g.gen.P(deprecationComment)
	}
	g.gen.Annotate(clientName, service.Location)
	g.gen.P("type ", clientName, " interface {")
	for _, method := range service.Methods {
		g.gen.Annotate(clientName+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.gen.P(deprecationComment)
		}
		g.gen.P(method.Comments.Leading,
			g.clientSignature(method))
	}
	g.gen.P("}")
	g.gen.P()
}

func (g *generator) generateNewClientDefinitions(service *protogen.Service) {
	clientName := service.GoName + "HTTPClient"
	g.gen.P("func New", clientName, "(ctx ", contextPackage.Ident("Context"), ", opts ...", clientOptionPackage.Ident("ClientOption"), ") ", "(", clientName, ") {")
	g.gen.P("o := ", clientOptionPackage.Ident("DefaultOptions"), "()")
	g.gen.P("for _, opt := range opts {")
	g.gen.P("opt(o)")
	g.gen.P("}")
	g.gen.P("")
	g.gen.P("return &", unexport(clientName), "{cc: o.HTTPClient, endpoint: o.Endpoint, authFunc: o.AuthFunc,}")
	g.gen.P("}")
	g.gen.P()
}

func (g *generator) generateClientStruct(service *protogen.Service) {
	clientName := service.GoName + "HTTPClient"
	g.gen.P("type ", unexport(clientName), " struct {")
	g.gen.P("// The http endpoint to connect to.")
	g.gen.P("endpoint string")
	g.gen.P("")
	g.gen.P("// The http client.")
	g.gen.P("cc *resty.Client")
	g.gen.P("// The AuthFunc.")
	g.gen.P("authFunc ", clientOptionPackage.Ident("AuthFunc"))
	g.gen.P("}")
	g.gen.P()
}

func (g *generator) clientSignature(method *protogen.Method) string {
	s := method.GoName + "(ctx " + g.gen.QualifiedGoIdent(contextPackage.Ident("Context"))
	if !method.Desc.IsStreamingClient() {
		s += ", req *" + g.gen.QualifiedGoIdent(method.Input.GoIdent) + ", opts ..." + g.gen.QualifiedGoIdent(clientOptionPackage.Ident("CallOption")) + ") ("
	}
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		s += "*" + g.gen.QualifiedGoIdent(method.Output.GoIdent)
	} else {
		s += method.Parent.GoName + "_" + method.GoName + "HTTPClient"
	}
	s += ", error)"
	return s
}

func (g *generator) generateClientMethod(method *protogen.Method, index int) {
	service := method.Parent
	if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
		//    TODO: support deprecated
	}
	g.gen.P("func (c *", unexport(service.GoName), "HTTPClient", ") ", g.clientSignature(method), "{")
	if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
		//    TODO: fill client generator
		info := getHTTPInfo(method)
		g.generateBaseURL(info)
		g.generateQueryString(method)
		g.generateRequest(method)
		g.gen.P("}")
		g.gen.P()
	}
}

func (g *generator) generateRequest(m *protogen.Method) {
	info := getHTTPInfo(m)

	body := "nil"
	verb := strings.ToUpper(info.verb)
	if info.body != "" {
		if verb == http.MethodGet || verb == http.MethodDelete {
			panic("invalid use of body parameter for a get/delete method")
		}
		g.gen.P("m := protojson.MarshalOptions{EmitUnpopulated: true,}")
		requestObject := "req"
		if info.body != "*" {
			requestObject = "body"
			g.gen.P(fmt.Sprintf("body := req%s", fieldGetter(info.body)))
		}
		g.gen.P("payload, err := m.Marshal(", requestObject, ")")
		g.gen.P("if err != nil {")
		g.gen.P("return nil, err")
		g.gen.P("}")
		g.gen.P("")

		body = "payload"
	}

	g.gen.P("resp, err := c.authFunc(c.cc.R()).")
	if body != "nil" {
		g.gen.P(fmt.Sprintf("SetBody(string(%s)).", body))
	}
	g.gen.P(fmt.Sprintf(`Execute("%s", baseUrl.String())`, verb))
	g.gen.P("if err != nil {")
	g.gen.P("return nil, err")
	g.gen.P("}")
	g.gen.P("")
	g.gen.P("var result ", m.Output.GoIdent)
	g.gen.P("um := protojson.UnmarshalOptions{DiscardUnknown: true,}")
	g.gen.P("if err := um.Unmarshal(resp.Body(), &result); err != nil {")
	g.gen.P("return nil, err")
	g.gen.P("}")
	g.gen.P("return &result, nil")
}

var httpPatternVarRegex = regexp.MustCompile(`{([a-zA-Z0-9_.]+?)(=[^{}]+)?}`)

func (g *generator) generateBaseURL(info *httpInfo) {
	fmtStr := info.url
	fmtStr = httpPatternVarRegex.ReplaceAllStringFunc(fmtStr, func(s string) string { return "%v" })

	g.gen.P("baseUrl, err := url.Parse(c.endpoint)")
	g.gen.P("if err != nil {")
	g.gen.P("return nil, err")
	g.gen.P("}")

	tokens := []string{fmt.Sprintf("%q", fmtStr)}
	// Can't just reuse pathParams because the order matters
	for _, path := range httpPatternVarRegex.FindAllStringSubmatch(info.url, -1) {
		// In the returned slice, the zeroth element is the full regex match,
		// and the subsequent elements are the sub group matches.
		// See the docs for FindStringSubmatch for further details.
		tokens = append(tokens, fmt.Sprintf("req%s", fieldGetter(path[1])))
	}
	g.gen.P("baseUrl.Path += ", fmt.Sprintf("fmt.Sprintf(%s)", strings.Join(tokens, ", ")))
	g.gen.P("")
}

func (g *generator) generateQueryString(m *protogen.Method) {
	queryParams := g.queryParams(m)
	// We want to iterate over fields in a deterministic order
	// to prevent spurious deltas when regenerating gapics.
	fields := make([]string, 0, len(queryParams))
	for p := range queryParams {
		fields = append(fields, p)
	}
	sort.Strings(fields)

	if len(fields) > 0 {
		g.gen.P("params := url.Values{}")
	}

	for _, path := range fields {
		field := queryParams[path]
		accessor := fieldGetter(path)
		key := lowerFirst(snakeToCamel(path))

		var paramAdd string
		paramAdd = fmt.Sprintf("params.Add(%q, fmt.Sprintf(%q, req%s))", key, "%v", accessor)
		if field.Desc.IsList() {
			g.gen.P(fmt.Sprintf("if items := req%s; len(items) > 0 {", accessor))
			b := strings.Builder{}
			b.WriteString("for _, item := range items {\n")
			b.WriteString(fmt.Sprintf("  params.Add(%q, fmt.Sprintf(%q, item))\n", key, "%v"))
			b.WriteString("}")
			paramAdd = b.String()
		} else {
			switch field.Desc.Kind() {
			case protoreflect.MessageKind, protoreflect.BytesKind:
				g.gen.P(fmt.Sprintf("if req%s != nil {", accessor))
			case protoreflect.StringKind:
				g.gen.P(fmt.Sprintf(`if req%s != "" {`, accessor))
			case protoreflect.BoolKind:
				g.gen.P(fmt.Sprintf("if req%s {", accessor))
			default:
				g.gen.P(fmt.Sprintf("if req%s != 0 {", accessor))
			}
		}

		for _, s := range strings.Split(paramAdd, "\n") {
			g.gen.P(s)
		}
		g.gen.P("}")
	}

	if len(fields) > 0 {
		g.gen.P("")
		g.gen.P("baseUrl.RawQuery = params.Encode()")
		g.gen.P("")
	}
}

func (g *generator) queryParams(m *protogen.Method) map[string]*protogen.Field {
	queryParams := map[string]*protogen.Field{}
	info := getHTTPInfo(m)
	if info == nil {
		return queryParams
	}
	if info.body == "*" {
		return queryParams
	}

	pathParams := g.pathParams(m)
	// Minor hack: we want to make sure that the body parameter is NOT a query parameter.
	pathParams[info.body] = &protogen.Field{}

	request := m.Input
	// Body parameters are fields present in the request body.
	// This may be the request message itself or a subfield.
	// Body parameters are not valid query parameters,
	// because that means the same param would be sent more than once.
	bodyField := g.lookupField(m.Input, info.body)

	// Possible query parameters are all leaf fields in the request or body.
	pathToLeaf := g.getLeafs(request, bodyField)
	// Iterate in sorted order to
	for path, leaf := range pathToLeaf {
		// If, and only if, a leaf field is not a path parameter or a body parameter,
		// it is a query parameter.
		if _, ok := pathParams[path]; !ok {
			queryParams[path] = leaf
		}
	}
	return queryParams

}

func (g *generator) getLeafs(msg *protogen.Message, excludedFields ...*protogen.Field) map[string]*protogen.Field {
	pathsToLeafs := map[string]*protogen.Field{}

	contains := func(fields []*protogen.Field, field *protogen.Field) bool {
		for _, f := range fields {
			if field == f {
				return true
			}
		}
		return false
	}

	// We need to declare and define this function in two steps
	// so that we can use it recursively.
	var recurse func([]*protogen.Field, *protogen.Message)

	handleLeaf := func(field *protogen.Field, stack []*protogen.Field) {
		elts := []string{}
		for _, f := range stack {
			elts = append(elts, f.Desc.TextName())
		}
		elts = append(elts, field.Desc.TextName())
		key := strings.Join(elts, ".")
		pathsToLeafs[key] = field
	}

	handleMsg := func(field *protogen.Field, stack []*protogen.Field) {
		if field.Desc.IsList() {
			// Repeated message fields must not be mapped because no
			// client library can support such complicated mappings.
			// https://cloud.google.com/endpoints/docs/grpc-service-config/reference/rpc/google.api#grpc-transcoding
			return
		}
		if contains(excludedFields, field) {
			return
		}
		// Short circuit on infinite recursion
		if contains(stack, field) {
			return
		}

		recurse(append(stack, field), field.Message)
	}

	recurse = func(
		stack []*protogen.Field,
		m *protogen.Message,
	) {
		for _, field := range m.Fields {
			if field.Desc.Kind() == protoreflect.MessageKind {
				handleMsg(field, stack)
			} else {
				handleLeaf(field, stack)
			}
		}
	}

	recurse([]*protogen.Field{}, msg)
	return pathsToLeafs

}

func (g *generator) pathParams(m *protogen.Method) map[string]*protogen.Field {
	pathParams := map[string]*protogen.Field{}
	info := getHTTPInfo(m)
	if info == nil {
		return pathParams
	}

	// Match using the curly braces but don't include them in the grouping.
	re := regexp.MustCompile("{([^}]+)}")
	for _, p := range re.FindAllStringSubmatch(info.url, -1) {
		// In the returned slice, the zeroth element is the full regex match,
		// and the subsequent elements are the sub group matches.
		// See the docs for FindStringSubmatch for further details.
		param := strings.Split(p[1], "=")[0]
		field := g.lookupField(m.Input, param)
		if field == nil {
			continue
		}
		pathParams[param] = field
	}

	return pathParams
}

func (g *generator) lookupField(msg *protogen.Message, field string) *protogen.Field {
	if msg == nil {
		return nil
	}

	var desc *protogen.Field
	msgFields := msg.Fields

	for _, seg := range strings.Split(field, ".") {
		for _, f := range msgFields {
			if f.Desc.TextName() == seg {
				desc = f

				if f.Desc.Kind() == protoreflect.MessageKind {
					msgFields = f.Message.Fields
				}
				break
			}
		}
	}
	return desc
}

type httpInfo struct {
	verb, url, body string
}

func getHTTPInfo(m *protogen.Method) *httpInfo {
	if m == nil || m.Desc.Options() == nil {
		return nil
	}

	eHTTP := proto.GetExtension(m.Desc.Options(), annotations.E_Http)
	httpRule := eHTTP.(*annotations.HttpRule)
	info := httpInfo{body: httpRule.GetBody()}
	switch httpRule.GetPattern().(type) {
	case *annotations.HttpRule_Get:
		info.verb = "get"
		info.url = httpRule.GetGet()
	case *annotations.HttpRule_Post:
		info.verb = "post"
		info.url = httpRule.GetPost()
	case *annotations.HttpRule_Patch:
		info.verb = "patch"
		info.url = httpRule.GetPatch()
	case *annotations.HttpRule_Put:
		info.verb = "put"
		info.url = httpRule.GetPut()
	case *annotations.HttpRule_Delete:
		info.verb = "delete"
		info.url = httpRule.GetDelete()
	}

	return &info
}

// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
func generateFile(p *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 || !hasHTTPRules(file) {
		return nil
	}

	filename := file.GeneratedFilenamePrefix + "_http.pb.go"
	gen := p.NewGeneratedFile(filename, file.GoImportPath)
	g := newGenerator(p, file, gen)
	g.generate()
	return gen
}

func hasHTTPRules(file *protogen.File) bool {
	for _, s := range file.Services {
		for _, m := range s.Methods {

			eHTTP := proto.GetExtension(m.Desc.Options(), annotations.E_Http)
			if httpRule, ok := eHTTP.(*annotations.HttpRule); ok && httpRule != nil {
				return true
			}
		}
	}
	return false
}

func (g *generator) generateServiceServer(service *protogen.Service) {
	g.generateServerInterface(service)
	g.generateUnimplementedServer(service)
	g.generateServiceRegistration(service)
	g.generateServiceHTTPHandler(service)
}

func (g *generator) generateServerInterface(service *protogen.Service) {
	serverName := service.GoName + "HTTPServer"
	g.gen.P("// ", serverName, " is the server API for ", service.GoName, " service.")
	g.gen.P("// All implementations should embed Unimplemented", service.GoName)
	g.gen.P("// for forward compatibility.")

	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.gen.P("//")
		g.gen.P(deprecationComment)
	}
	g.gen.Annotate(serverName, service.Location)
	g.gen.P("type ", serverName, " interface {")
	for _, method := range service.Methods {
		g.gen.Annotate(serverName+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.gen.P(deprecationComment)
		}
		g.gen.P(method.Comments.Leading,
			g.serverSignature(method))
	}
	g.gen.P("}")
	g.gen.P()
}

func (g *generator) serverSignature(method *protogen.Method) string {
	s := method.GoName + "(ctx " + g.gen.QualifiedGoIdent(contextPackage.Ident("Context"))
	if !method.Desc.IsStreamingClient() {
		s += ", req *" + g.gen.QualifiedGoIdent(method.Input.GoIdent) + ") ("
	}
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		s += "*" + g.gen.QualifiedGoIdent(method.Output.GoIdent)
	} else {
		s += method.Parent.GoName + "_" + method.GoName + "HTTPServer"
	}
	s += ", error)"
	return s
}

func (g *generator) generateUnimplementedServer(service *protogen.Service) {
	serverName := service.GoName + "HTTPServer"
	g.gen.P("// Unimplemented", serverName, " should be embedded to have forward compatible implementations.")
	g.gen.P("type Unimplemented", serverName, " struct {")
	g.gen.P("}")
	g.gen.P()

	for _, method := range service.Methods {
		nilArg := ""
		if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
			nilArg = "nil,"
		}
		g.gen.P("func (Unimplemented", serverName, ") ", g.serverSignature(method), "{")
		g.gen.P("return ", nilArg, fmtPackage.Ident("Errorf"), "(", `"method `, method.GoName, ` not implemented")`)
		g.gen.P("}")
		g.gen.P()
	}
}

func (g *generator) generateServiceRegistration(service *protogen.Service) {
	serverName := service.GoName + "HTTPServer"
	g.gen.P("func Register", serverName, "(e *echo.Echo", ", srv ", serverName, ", m ...echo.MiddlewareFunc) {")
	for _, method := range service.Methods {
		info := getHTTPInfo(method)
		if info == nil {
			continue
		}

		g.gen.P("e.", strings.ToUpper(info.verb), `("`, replaceUrl(info.url), `", `, getMethodHTTPHandlerName(method), "(srv), m...)")

	}
	g.gen.P("}")
	g.gen.P()
}

func replaceUrl(url string) string {
	return httpPatternVarRegex.ReplaceAllString(url, ":$1")
}

func (g *generator) generateServiceHTTPHandler(service *protogen.Service) {
	for _, method := range service.Methods {
		g.generateMethodHTTPHandler(method)
	}
}

func (g *generator) generateMethodHTTPHandler(method *protogen.Method) {
	service := method.Parent
	serverName := service.GoName + "HTTPServer"
	hname := getMethodHTTPHandlerName(method)
	info := getHTTPInfo(method)
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		g.gen.P("func ", hname, "(srv ", serverName, ") echo.HandlerFunc", " {")
		g.gen.P("return func(c echo.Context) error {")
		g.gen.P("in := new(", g.gen.QualifiedGoIdent(method.Input.GoIdent), ")")

		// path parameters
		pathParams := g.pathParams(method)
		queryParams := g.queryParams(method)
		if info.body != "" || len(queryParams) > 0 || len(pathParams) > 0 {
			g.gen.P("pathParams := make(map[string]string, 0)")
			if len(pathParams) > 0 {
				g.gen.P("for _, key := range c.ParamNames() {")
				g.gen.P("pathParams[key] = c.Param(key)")
				g.gen.P("}")
			}
			g.gen.P("if err := ", chapicRuntimePackage.Ident("Bind"), "(in, c.Request(), pathParams); err != nil {")
			g.gen.P("return echo.NewHTTPError", "(", httpPackage.Ident("StatusBadRequest"), ", echo.Map", `{"error": err}`, ")")
			g.gen.P("}")
			g.gen.P()
		}

		g.gen.P("resp, err := srv.", method.GoName, "(c.Request().Context(), in)")
		g.gen.P("if err != nil {")
		g.gen.P("return err")
		g.gen.P("}")
		g.gen.P()
		g.gen.P("return c.JSON(", httpPackage.Ident("StatusOK"), ", resp)")
		g.gen.P("}")
		g.gen.P("}")
		g.gen.P()
	}
}

func getMethodHTTPHandlerName(method *protogen.Method) string {
	service := method.Parent
	hname := fmt.Sprintf("_%s_%s_HTTPHandler", service.GoName, method.GoName)
	return hnameFuncNameFormatter(hname)
}

func hnameFuncNameFormatter(hname string) string {
	return hname
}
